{"version":3,"file":"js/contacts.05ba26f7.js","mappings":"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","sources":["webpack://imvue/./src/utils/axios-config.js","webpack://imvue/./src/components/IM/Me/UpdatePassword.vue","webpack://imvue/./src/components/IM/Me/UpdatePassword.vue?a009"],"sourcesContent":["import axios from 'axios';\nimport { ElMessage } from \"element-plus\";\nimport {userCipherFrontend, userCipherBackend} from \"@/utils/encrypt\";\nimport {backendBaseUrl} from \"@/utils/base-url-setting\";\n\nconst axios_config = axios.create({\n    baseURL: backendBaseUrl,\n    timeout: 10000\n})\n\n// 设置Axios的请求拦截器\naxios_config.interceptors.request.use(\n    config => {\n        config.headers.Authorization = `Bearer ${localStorage.getItem('token')}`;\n\n        // 如果访问路径中包含upload，则不进行Base64编码\n        if (!config.url.includes('upload')) {\n            if (config.data) {\n                // 将请求数据 config.data 进行加密\n                const dd = userCipherFrontend.encrypt(JSON.stringify(config.data));\n                // config.data中存储数据格式为：\n                // {\n                //     data: '加密后的数据',\n                //     pos: '加密位置',\n                //     mac: '',\n                //     length: ''\n                // }\n                config.data = {\n                    data: dd.cipherText,\n                    position: dd.position,\n                    mac: '',\n                    length: 0\n                };\n            }\n        }\n        return config;\n    },\n    error => {\n        console.log('request error', error);\n        return Promise.reject(error);\n    }\n);\n\n// 设置Axios的响应拦截器\n// 如果token过期（返回401），则跳转到登录页面\naxios_config.interceptors.response.use(\n    response => {\n        // return response;\n        // 将相应数据 response.data.data 进行Base64解码（使用UTF-8）\n        if (response.data.data) {\n            const encryptedData = response.data.en_data.data;\n            const position = response.data.en_data.position;\n            let decryptedData = '';\n            try{\n                decryptedData = userCipherBackend.decrypt(encryptedData, position);\n            } catch (e) {\n                ElMessage.error('解密失败，请重新登录获取密钥');\n                localStorage.clear();\n                this.$router.push('/login');\n            }\n            response.data.data = JSON.parse(decryptedData);\n        }\n        return response;\n    },\n    error => {\n        console.log('error', error)\n        if (error.response.status === 401) {\n            ElMessage.error('登录无效或过期，请重新登录');\n            localStorage.clear();\n            window.location.href = '/login';\n        }\n        return Promise.reject(error);\n    }\n);\n\n\nexport default axios_config\n","<template>\n    <el-card class=\"update-password-card\">\n        <h2>修改密码</h2>\n        <el-divider></el-divider>\n        <el-form :model=\"ruleForm\" status-icon :rules=\"rules\" ref=\"ruleForm\" label-width=\"120px\" class=\"demo-ruleForm\">\n            <el-form-item label=\"原密码\" prop=\"oriPass\">\n                <el-input type=\"password\" v-model=\"ruleForm.oriPass\" autocomplete=\"off\" show-password></el-input>\n            </el-form-item>\n            <el-form-item label=\"密码\" prop=\"pass\">\n                <el-input type=\"password\" v-model=\"ruleForm.pass\" autocomplete=\"off\" show-password></el-input>\n            </el-form-item>\n            <el-form-item label=\"确认密码\" prop=\"checkPass\">\n                <el-input type=\"password\" v-model=\"ruleForm.checkPass\" autocomplete=\"off\" show-password></el-input>\n            </el-form-item>\n            <el-form-item>\n                <el-button type=\"primary\" @click=\"submitForm('ruleForm')\">提交</el-button>\n                <el-button @click=\"resetForm('ruleForm')\">重置</el-button>\n            </el-form-item>\n        </el-form>\n    </el-card>\n</template>\n\n<style scoped>\n.update-password-card {\n    width: 500px;\n    margin: 40px auto;\n    padding: 20px;\n    border-radius: 10px;\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n}\n</style>\n\n<script>\nimport axios_config from \"@/utils/axios-config\";\nimport {ElDivider, ElMessage} from \"element-plus\";\n\nexport default {\n    name: 'UpdatePassword',\n    components: {ElDivider},\n    data() {\n        return {\n            ruleForm: {\n                oriPass: '',\n                pass: '',\n                checkPass: '',\n            },\n            rules: {\n                oriPass: [\n                    { validator: this.validateOriPass, trigger: 'blur' }\n                ],\n                pass: [\n                    { validator: this.validatePass, trigger: 'blur' }\n                ],\n                checkPass: [\n                    { validator: this.validateCheckPass, trigger: 'blur' }\n                ],\n            }\n        };\n    },\n\n    methods: {\n        validateOriPass(rule, value) {\n            return new Promise((resolve, reject) => {\n                if (value === '') {\n                    reject(new Error('请输入原密码'));\n                } else {\n                    resolve();\n                }\n            });\n        },\n\n        validatePass(rule, value) {\n            return new Promise((resolve, reject) => {\n                if (value === '') {\n                    reject(new Error('请输入密码'));\n                } else {\n                    resolve();\n                }\n            });\n        },\n\n        validateCheckPass(rule, value) {\n            return new Promise((resolve, reject) => {\n                if (value === '') {\n                    reject(new Error('请再次输入密码'));\n                } else if (value !== this.ruleForm.pass) {\n                    reject(new Error('两次输入密码不一致!'));\n                } else {\n                    resolve();\n                }\n            });\n        },\n        submitForm(formName) {\n            this.$refs[formName].validate().then(valid => {\n                if (valid) {\n                    axios_config.post('/api/user/update_password', {\n                        username: JSON.parse(localStorage.getItem('user')),\n                        old_password: this.ruleForm.oriPass,\n                        new_password: this.ruleForm.pass\n                    }).then(res => {\n                        if (res.data.code === 0) {\n                            ElMessage.success('修改密码成功');\n                            localStorage.removeItem('token');\n                            this.$router.push('/login');\n                        } else {\n                            ElMessage.error(res.data.msg);\n                        }\n                    }).catch(err => {\n                        ElMessage.error('修改密码失败，连接服务器错误');\n                    });\n                } else {\n                    ElMessage.error('请检查输入是否正确');\n                }\n            }).catch(e => {\n                ElMessage.error(e.checkPass[0].message || '验证过程中出错');\n            });\n        },\n        resetForm(formName) {\n            this.$refs[formName].resetFields();\n        },\n        login() {\n            this.$router.push('/login');\n        }\n    }\n}\n</script>","import { render } from \"./UpdatePassword.vue?vue&type=template&id=92f81536&scoped=true\"\nimport script from \"./UpdatePassword.vue?vue&type=script&lang=js\"\nexport * from \"./UpdatePassword.vue?vue&type=script&lang=js\"\n\nimport \"./UpdatePassword.vue?vue&type=style&index=0&id=92f81536&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-92f81536\"]])\n\nexport default __exports__"],"names":["axios_config","axios","create","baseURL","backendBaseUrl","timeout","interceptors","request","use","config","headers","Authorization","localStorage","getItem","url","includes","data","dd","userCipherFrontend","encrypt","JSON","stringify","cipherText","position","mac","length","error","console","log","Promise","reject","response","encryptedData","en_data","decryptedData","userCipherBackend","decrypt","e","ElMessage","clear","$router","push","parse","status","window","location","href","_createElementVNode","_createBlock","_component_el_card","class","default","_withCtx","_hoisted_1","_createVNode","_component_el_divider","_component_el_form","model","$data","ruleForm","rules","ref","_component_el_form_item","label","prop","_component_el_input","type","modelValue","oriPass","_cache","$event","autocomplete","_","pass","checkPass","_component_el_button","onClick","$options","submitForm","_createTextVNode","resetForm","name","components","ElDivider","validator","this","validateOriPass","trigger","validatePass","validateCheckPass","methods","rule","value","resolve","Error","formName","$refs","validate","then","valid","post","username","old_password","new_password","res","code","success","removeItem","msg","catch","err","message","resetFields","login","__exports__","render"],"sourceRoot":""}